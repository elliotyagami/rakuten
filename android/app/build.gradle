apply plugin: "com.android.application"

import com.android.build.OutputFile


project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    flavorDimensions "default"
    defaultConfig {
        applicationId "com.chat"
        minSdkVersion 23
        targetSdkVersion 25
        multiDexEnabled true
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    productFlavors {
        ar {
            resValue 'string', 'app_name', 'Chat-ar'
            buildConfigField 'String', 'VR_PLATFORM', '"GVR"' //default to GVR
        }
        gvr {
            resValue 'string', 'app_name', 'Chat-gvr'
            buildConfigField 'String', 'VR_PLATFORM', '"GVR"'
        }
        ovr {
            resValue 'string', 'app_name', 'Chat-ovr'
            applicationIdSuffix '.ovr'
            buildConfigField 'String', 'VR_PLATFORM', '"OVR_MOBILE"'
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-agora')
    implementation project(':react-native-maps')
    implementation project(':react-native-i18n')

    implementation project(':gvr_common')
    implementation project(':arcore_client')
    implementation project(path: ':react_viro')
    implementation project(path: ':viro_renderer')

    implementation fileTree(dir: "libs", include: ["*.jar"])

    // implementation "com.android.support:appcompat-v7:23.0.1"
    implementation 'com.android.support:appcompat-v7:25.0.0'
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "com.google.android.gms:play-services-location:${rootProject.ext.googlePlayServicesVersion}" // disable if you don't want to use enableHighAccuracy: true in geolocation
    implementation "com.google.android.gms:play-services-base:${rootProject.ext.googlePlayServicesVersion}"
    implementation "com.google.android.gms:play-services-maps:${rootProject.ext.googlePlayServicesVersion}"

    implementation 'com.google.android.exoplayer:exoplayer:r2.2.0'
    implementation 'com.google.protobuf.nano:protobuf-javanano:3.0.0-alpha-7'
    implementation 'com.amazonaws:aws-android-sdk-core:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-ddb-mapper:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-cognito:2.2.+'
    implementation 'com.amazonaws:aws-android-sdk-cognitoidentityprovider:2.2.+'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}
